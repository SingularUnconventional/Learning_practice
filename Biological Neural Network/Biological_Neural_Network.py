import math
import random
import numpy as np


class DataTransmission:
    def __init__(self, NextNeuron, Weight):
        self.NextNeuron = NextNeuron
        self.Weight = Weight
class NeuronNerwork:
    def __init__(self, DataSet):
        self.DataSet = DataSet
        self.NETWORK = [Neuron() for i in range(len(self.DataSet))]

        for number in range(len(self.DataSet)):
            self.NETWORK[number].SetData(DataPackaging(self.DataSet[number][1:], self.NETWORK), self.DataSet[number][0])

        self.ActiveNeuron = [self.NETWORK[n] for n in range(inputNeuronSise)]
class Neuron:
    def __init__(self):
        self.InputSignal  = 0
        self.OutputSignal = 0

    def SetData(self, DataTransmissions, Threshold):
        self.DataTransmissions = DataTransmissions
        self.Threshold = Threshold

    def Migration(self):
        PreliminaryNeuron = []

        for Data in self.DataTransmissions:
            Data.NextNeuron.InputSignal += self.OutputSignal * Data.Weight
            PreliminaryNeuron.append(Data.NextNeuron)

        return PreliminaryNeuron
class Game:
    def __init__(self):
        self.unreward = 0
        self.loseReward = -1
        self.reward = 1
        self.hungerLimit = 10
        self.place_X = 10
        self.place_Y = 10

        self.currentDirection   = 1
        self.Head               = [random.randint(1, self.place_Y-2), random.randint(1, self.place_X-2)]
        self.Food               = [random.randint(0, self.place_Y-1), random.randint(0, self.place_X-1)]
        self.tail               = []
        self.score              = 0
        self.hunger             = 0
        
        self.place              = [[0 for x in range(self.place_X)] for y in range(self.place_Y)]
        self.place[self.Food[0]][self.Food[1]] = 1

    def reset(self):
        self.currentDirection   = 1
        self.Head               = [random.randint(1, self.place_Y-2), random.randint(1, self.place_X-2)]
        self.Food               = [random.randint(0, self.place_Y-1), random.randint(0, self.place_X-1)]
        self.tail               = []
        self.score              = 0
        self.hunger             = 0
        
        self.place              = [[0 for x in range(self.place_X)] for y in range(self.place_Y)]
        self.place[self.Food[0]][self.Food[1]] = 1

    def State(self):
        def distance_measurement_UP():
            for i in reversed(range(self.Head[0])):#^
                if self.place[i][self.Head[1]] == 2: return (self.Head[0] - i)/10

            return (self.Head[0])/10
        def distance_measurement_LEFT():
            for i in reversed(range(self.Head[1])):#<
                if self.place[self.Head[0]][i] == 2: return (self.Head[1] - i)/10

            return (self.Head[1])/10
        def distance_measurement_DOWN():
            for i in range(self.Head[0], self.place_Y):#∨
                if self.place[i][self.Head[1]] == 2: return (i - self.Head[0])/10

            return (self.place_Y - self.Head[0] -1)/10
        def distance_measurement_RIGHR():
            for i in range(self.Head[1], self.place_X):#>
                if self.place[self.Head[0]][i] == 2: return (i - self.Head[1])/10

            return (self.place_X - self.Head[1] -1)/10

        distance_measurement = [distance_measurement_LEFT(),
                                distance_measurement_UP(),
                                distance_measurement_RIGHR(),
                                distance_measurement_DOWN()]


        state = [distance_measurement[i%4] for i in range(self.currentDirection, self.currentDirection+3)]
        
        Food_list = [[1, -1, -1, 0, 1], [0, 1, -1, 0, 1], [1, 1, 1, 0, -1], [0, -1, 1, 0, -1]]

        for i in range(4):
            if self.currentDirection == i:
                if np.sign(self.Food[(Food_list[i][0]-1)**2] - self.Head[(Food_list[i][0]-1)**2]) == Food_list[i][1]:
                    if      np.sign(self.Food[Food_list[i][0]] - self.Head[Food_list[i][0]]) == Food_list[i][2]: return state + [1, 0, 0]
                    elif    np.sign(self.Food[Food_list[i][0]] - self.Head[Food_list[i][0]]) == Food_list[i][3]: return state + [0, 1, 0]
                    elif    np.sign(self.Food[Food_list[i][0]] - self.Head[Food_list[i][0]]) == Food_list[i][4]: return state + [0, 0, 1]
                else: return state + [0, 0, 0]

    #상황과 행동이 주어지면 보상과 다음 상황 출력(보이는 상황과 보이지 않는 상황 모두)
    def Game_(self, action):
        reward_ = self.unreward

        #상황추가

        #머리부분을 꼬리로 바꾸고, 꼬리 추가
        self.place[self.Head[0]][self.Head[1]] = 2
        self.tail = self.tail + [[self.Head[0], self.Head[1]]]

        self.currentDirection = (self.currentDirection + action)%4

        #방향에 따른 이동, 막힐 시 아웃
        if   self.currentDirection == 0:
            if self.Head[0] == 0:        return self.loseReward, None
            else: self.Head[0]-=1
        elif self.currentDirection == 1:
            if self.Head[1] == self.place_X-1:return self.loseReward, None
            else: self.Head[1]+=1
        elif self.currentDirection == 2:
            if self.Head[0] == self.place_Y-1:return self.loseReward, None
            else: self.Head[0]+=1
        elif self.currentDirection == 3:
            if self.Head[1] == 0:        return self.loseReward, None
            else: self.Head[1]-=1
        
        next_state = self.State()

        #음식을 먹을 시 점수 추가와 보상, 다시 음식 생성
        if self.place[self.Head[0]][self.Head[1]] == 1: 
            self.score += 1
            reward_ = self.reward
            self.hunger = 0

            #머리에 생성이 되면 다시 반복
            while True:
                x = random.randint(0, self.place_X-1)
                y = random.randint(0, self.place_Y-1)
                if self.Head[0] != y or self.Head[1] != x:
                    self.Food = [y, x]
                    self.place[y][x] = 1
                    break

        #꼬리에 닿을 시 아웃
        elif self.place[self.Head[0]][self.Head[1]] == 2: return self.loseReward, None

        #꼬리 끝 지우기
        else: 
            if self.place[self.tail[0][0]][self.tail[0][1]] != 1: self.place[self.tail[0][0]][self.tail[0][1]] = 0
            self.tail = self.tail[1:]

            if self.hunger == self.hungerLimit * (self.score+3): return self.unreward, None
            self.hunger += 1

        #머리 표시
        self.place[self.Head[0]][self.Head[1]] = 3
        

        #시각화
        #print(f'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{self.score}\t{self.Head}\t{self.currentDirection}')
        #for y in range(self.place_X):
        #    for x in range(self.place_X):
        #        print(self.place[y][x], end = '\t')
        #    print()
        #    print()
        #    print()

        return reward_, next_state

def SetRanbomData():
    dataSet = [[random.uniform(ThresholdRange[0], ThresholdRange[1])] for n in range(NeuronSise)]
    for n in range(SynapticLim): 
        dataSet[random.randint(0, NeuronSise - OutputNeuronSise - 1)].append(
                [random.randint(0, NeuronSise - 1), 
                 random.uniform(WeightRange[0], WeightRange[1])])
    return dataSet
def InheritedData():
    Parents = [HOF[DrawResult(0)][1], HOF[DrawResult(1)][1]]
    dataSet = [random.choice(Parents)[n] for n in range(NeuronSise)]

    for d in dataSet:
        if np.random.choice([True, False], p = [MutantQuantity, 1-MutantQuantity]): 
            
            RD1 = random.randint(0, NeuronSise - OutputNeuronSise - 1)
            RD2 = random.randint(0, NeuronSise - OutputNeuronSise - 1)

            RF =  np.random.choice([0, 1, 2], p = [0.05, 0.8, 0.15])

            if RF == 0:
                dataSet[RD1], dataSet[RD2] = dataSet[RD2], dataSet[RD1] #역위
            elif RF == 1:
                while len(dataSet[RD1]) == 1: 
                    RD1 = random.randint(0, NeuronSise - OutputNeuronSise - 1)

                dataSet[RD2].insert(1, dataSet[RD1].pop(
                    random.randint(1, len(dataSet[RD1])-1))) #전좌
            else:
                dataSet[random.randint(0, NeuronSise - 1)][0] = random.uniform(
                    ThresholdRange[0], ThresholdRange[1]) #초기화(역치)

    return dataSet
def Deduplication(Lst):
    result = []
    for value in Lst:
        if value not in result:
            result.append(value)
    return result
def NumLocation(lst, num):
  lo = 0
  hi = len(lst)
  while lo < hi:
    mid = (lo + hi) // 2
    if lst[mid][0] > num:
      lo = mid + 1
    else:
      hi = mid
  return lo
def NeuronGO(neuron):
    PreliminaryNeuron = []
    for move in neuron: 
        PreliminaryNeuron += move.Migration()

    ActiveNeuron_Temp = []
    for Element in Deduplication(PreliminaryNeuron):
        if Element.InputSignal > Element.Threshold:
            Element.OutputSignal = ActiveFunction(Element.InputSignal)
            ActiveNeuron_Temp.append(Element)
        Element.InputSignal = 0

    return ActiveNeuron_Temp


ActiveFunction = lambda x: (np.exp(x) - np.exp(-x)) / (np.exp(x) + np.exp(-x))
DataPackaging = lambda Data, NETWORK: [
    DataTransmission(NETWORK[Data[i][0]], Data[i][1]) for i in range(len(Data))
    ]
DrawResult = lambda n: np.random.choice(
    range(SpecialSnakesNumber), 
    2, 
    p = GeneticProbability
    )[n]


inputNeuronSise = 6
OutputNeuronSise = 3
NeuronSise = 40
SynapticLim = 800
ThresholdRange = (-2, 2)
WeightRange = (-2, 2)

NeuronCycle = 15

SnakesNumber = 1000
SpecialSnakesNumber = 100
SpecialGeneticProbability = 3
MutantQuantity = 0.01


Snakes = [NeuronNerwork(SetRanbomData()) for n in range(SnakesNumber)]
Games = [Game() for n in range(SnakesNumber)]

HOF = [[0, Snakes[l].DataSet] for l in range(SpecialSnakesNumber)]

GeneticProbability = [n**SpecialGeneticProbability for n in range(SpecialSnakesNumber, 0, -1)]
GeneticProbability = [num / sum(GeneticProbability) for num in GeneticProbability]


state = []
while True:
    print(f"{[i[0] for i in HOF[:20]]}")
    with open('data.txt', 'w') as file:
       file.write(str(HOF[0]))

    for n in range(SnakesNumber):
        for cycle in range(NeuronCycle):
            Snakes[n].ActiveNeuron = NeuronGO(Snakes[n].ActiveNeuron)
        #print([Snakes[n].NETWORK[-i-1].OutputSignal for i in range(OutputNeuronSise)])
        reward, state = Games[n].Game_(np.argmax([
            Snakes[n].NETWORK[-i-1].OutputSignal 
            for i in range(OutputNeuronSise)
            ])-1)
        
        if state:
            Snakes[n].ActiveNeuron = Deduplication(Snakes[n].ActiveNeuron + Snakes[n].NETWORK[:inputNeuronSise])
            for In in range(inputNeuronSise):
                Snakes[n].NETWORK[In].OutputSignal = state[In]
        else: 
            if Games[n].score >= HOF[-1][0]:
                HOF.insert(NumLocation(HOF, Games[n].score), [Games[n].score, Snakes[n].DataSet])
                HOF = HOF[:-1]
            #print(f"아웃\t\t\t 점수:{Games[n].score}")
            Snakes[n].DataSet = InheritedData()
            Games[n].reset()

#SetDoData = [[1.9342445792821992, [25, 1.245680647507601], [1, -0.24381319525071898], [33, 0.7145425084347972], [23, 0.8244260299777144], [16, -1.3589273015032077], [15, 0.3302617887819723], [0, 1.3174825742365992], [35, -0.2231430916585233], [3, 0.3325534981213627], [24, 0.2780739372116825], [34, -0.49404727675123095], [4, 1.8622640888091282], [14, -1.9203267844673477], [11, 1.3212776863677007], [23, 1.5976227579998374], [3, 1.0139146314782606], [13, 1.8080075733640286], [11, -0.23828436608284198]], [0.19231225166321142, [5, -1.9844307538825587], [22, 1.7747687499070444], [8, -1.7903832732851122], [32, 1.1547718865269392], [36, -0.40918880087371257], [26, 0.54190635002398], [4, -0.8833548319205269], [23, 0.8081577086125513], [12, 1.264606408629084], [33, 1.2478277464236402], [7, -1.803427552555668], [24, 1.2687428141007349], [36, 0.09476181125758165], [0, 1.297087186113564], [33, -0.32650796798216497], [23, -1.5560858889290796], [15, 0.44396987676604427], [33, -1.5766619939408546], [0, 1.5138305678348476]], [-0.03138352872065919, [24, -0.09334013986368683], [31, -1.5076338070803046], [19, -0.41832813116624434], [34, 0.8638544571452371], [34, 1.8842975965282438], [35, 1.9036333161185999], [38, -0.15881221905728937], [11, 1.0570240796422636], [34, 1.0258343189150496], [2, -0.15430152496730543], [27, 0.9491723137733699], [8, 1.7638060192520961], [0, -0.4856609440707955], [22, 0.517685910297597], [15, -1.3021746834436891], [9, -0.40322694212254273], [19, -0.7155788574675932]], [1.349891746370937, [35, 0.5579814515790553], [22, -0.25837305375697994], [27, 1.5471136929230678], [21, -1.5623334042342134], [6, 0.11863969014788722], [25, -0.16548973094173824], [17, 0.10131190490730013], [30, 0.8520033760371364], [24, -0.15550328727364882], [19, 1.131676458954035], [9, -1.7872092276513474], [7, 0.5587657866982894], [10, -1.3646898583809146], [11, 1.5982735777848402], [36, 0.3390022716984511], [21, 1.5197406407194731], [35, 0.2611073224865996], [4, 0.7524694025477525], [39, -0.8976799975556347], [15, -0.30384032900503577], [34, -0.1741543974935209]], [-0.6263244649623343, [1, 0.8748362223441766], [35, -1.710926062204424], [5, 1.5701958785653676], [2, 0.9032672204242651], [20, -0.9112561737228981], [10, -0.6001591365897538], [5, 1.0706890803843496], [29, 1.0214242414802261], [21, -1.1745952334361824], [13, 1.983663879136313], [5, -0.16695576056468475], [36, 1.3168659683510957], [23, -1.8736738847360392], [23, 1.128310958216209], [0, 1.8555137942559456], [0, -1.4119099388351182], [36, 0.6436890913714994], [14, 1.7767985511166073], [8, 1.3260530083360376], [32, -1.514835454314598], [35, 0.08692100121431956], [29, -1.4995325334336704], [5, 1.9009189119788923], [26, 1.908285479157421], [23, 0.21807531106639066]], [1.2032230032594988, [35, -1.6506039047266765], [11, -0.5564443341796657], [39, 0.970188565144785], [39, 1.5255260172495224], [10, 1.0088186568802322], [15, 1.4980397072199616], [12, 0.8962293700009138], [34, -0.8371317697139982], [19, 0.689272339061354], [2, -1.3618382078916142], [18, 1.3237315844707451], [11, 0.013663658684893054], [1, 0.426566174854381], [20, -1.2844064207484278], [14, -1.1070175936469302], [27, -1.0175805570368817], [27, 1.6420009050679174]], [-1.3581347210048529, [27, 0.08360404004732347], [36, -0.35469382245203285], [35, 0.53576633687987], [17, -0.12430227171427966], [26, 1.4473746585882483], [18, -1.3457464921712954], [37, -1.5603743612487966], [9, 0.987457028120601], [5, 0.4387426460757222], [28, -0.07823685729812402], [14, -0.6014348693360754], [22, 1.6673313920642348], [8, -0.7486213767157017], [25, 1.623704469721972], [26, 1.894570670742985], [6, 1.1437664054420482], [18, -1.4289704018191114], [12, -0.6764992758454516], [11, -0.47885989208704327], [30, -1.3125193158929207], [27, 0.993405367845182], [17, 1.5400092753567907], [1, -0.19330046524703448]], [-1.0707073605353439, [19, -0.35065318996980066], [12, -0.2320220205996142], [2, -1.7359288931011547], [25, 1.3278856597369826], [4, 0.7605725629449807], [6, 0.7344738523722971], [16, 0.36605069254479483], [35, 0.10213576524388746], [28, 1.8747051935056382], [18, 0.15936793895041035], [30, 0.6681750724491966], [24, 0.2679242760586078], [15, -0.5360747453966241], [3, -0.169882492193429], [29, -0.4126177569025429], [9, -0.6847590234531307], [13, -0.8456654160596964], [22, 0.5875066419250405], [18, -0.38935945455513554], [22, 1.2518553459378574], [1, -0.7098183911637794], [24, -1.8338195605989727], [30, 0.37289228269260866], [23, -1.761412733192596]], [0.5674854736231465, [39, 0.975754237471703], [32, 0.12898702524511085], [10, -0.6788805674163632], [29, 1.2310712807445694], [12, 0.8013042994160635], [16, 0.2791853530066759], [12, 1.1554945792772848], [34, -0.9340191998829122], [12, 1.3121153544839603], [19, -1.3866870151046329], [33, -0.24713139397739825], [9, 0.11817089355069799], [11, 0.48864042177755174], [13, -0.29615354862760324], [17, 1.5733656227186135], [18, 0.15770309135722638], [12, -1.9479024322521528], [3, -0.3290039242677656], [27, 0.44463135226671513], [31, 1.990074119458856], [26, -1.083064108805031], [5, -1.8420077927318137], [35, 1.3280163314410727]], [0.9689753052941117, [29, 0.5044955360308956], [39, 0.6994625621006452], [14, -1.7986087523307694], [4, 0.12715259256314493], [14, -1.0718927989795524], [37, 0.589018287853635], [2, 0.26697061143074396], [25, -1.9334181136133597], [13, 1.1364616266586198], [13, 0.42132795287336844], [29, -1.7798383262874165], [3, -1.457080903803345], [36, -0.1522006923094903], [21, 0.2514852561070593], [8, 0.9720343542353342], [24, 0.5365642580907859], [26, -0.1706148879377154]], [-1.1276213935083974, [11, 0.9440501453274392], [18, -0.5013989706579514], [36, -1.0082896459147292], [9, -1.5314168468366751], [38, -0.20408175545202267], [9, 1.6221431840110214], [34, -1.9835090364346062], [2, -1.4119817062142883], [25, 1.0955434344877695], [19, -1.3700132069882667], [32, 0.4334968464851272], [27, 0.8231266277221319], [9, 0.18582544077242957], [39, -0.3832945700027577], [24, -0.8334555535091663], [16, -0.756374473418687], [2, -1.7540479502846082], [36, 0.45767081092968454], [20, 0.843989206370507], [14, 1.9344124491664267], [4, -0.5108280986604439], [5, 1.97035914075656], [35, 0.12318537594852508], [19, -0.692621464038317], [36, 1.4316389992620349], [20, -0.5663511853214747], [3, 0.789069737695578], [17, -0.7006991954302824], [32, 1.2214404349758694], [33, 0.3896115913835696]], [-1.2302733678586089, [2, -0.8102695599472822], [29, 0.388673711348976], [26, -1.072249858446849], [7, -0.042788544013985685], [16, -1.174930861651287], [38, -1.1187578469734287], [4, -1.8882508660063562], [38, 1.8247249021310439], [4, -1.309258720617974], [34, -0.9576269295803481], [11, 0.9046778393096622], [0, 1.6965299977755186], [8, -0.2573948295457176], [32, 0.8059137883138927], [39, 1.8263327602552506]], [-1.177205864433159, [8, -0.5371835847010358], [8, -1.2333072482790186], [33, -1.9183717215338048], [27, 1.1406213227522035], [34, -1.8468664151696927], [19, -1.0506295655826872], [6, 0.017500294131153726], [39, 0.764053357930119], [11, -0.07845821253999796], [11, -0.9590481607366046], [1, -1.1626649467110193], [8, 0.630934198387405], [6, -1.1168571103057858], [29, 1.4211196407297737], [34, -0.5013529168011521], [10, 1.53791458059563], [19, -0.4545374226638561], [29, 0.9653239750665414], [3, -0.35813478354762207], [12, 0.9044092400951329], [31, 0.8716011710931997], [25, 1.3370551060349252], [26, 1.4292490367530832], [13, -1.1953368650732177], [7, -1.3566034299689043], [1, -0.2217192771336367]], [0.6526870152402924, [12, -0.6656842286040292], [18, 1.2695951901675047], [37, -0.7570356747100937], [9, 1.021027737543644], [26, 1.0961573007936805], [20, -0.3618151079328289], [15, -1.2559470485339395], [34, -0.7902450339345357], [33, 0.19917283783651563], [19, 0.36060699584464295], [19, 1.2685920010781002], [8, -1.2623315948248677], [26, -1.2185142526608805], [2, -0.32053924274578316], [5, -1.5554856486302064], [38, -1.055900783068867], [11, 0.21168216733041367], [10, 0.7300924358041687]], [1.139133323107826, [16, -0.24895228524712465], [39, 1.1239010218428271], [28, -1.734099669582669], [8, -0.35060791802393254], [5, -1.2272204457611808], [0, -1.7715285077227656], [29, 0.8709309282369144], [39, 0.9342049401531418], [33, -0.15502383726399227], [35, -1.355452049819839], [30, -0.48071699411784685], [39, -0.8806597514069434], [21, -0.9534665378363365], [23, 1.886894662055468], [18, -1.4826665918542794], [21, -0.5919420405567415], [22, 0.9454034914696545], [13, -1.2740149263979172], [4, 0.5593649218181946], [36, -0.872162865276068], [36, -0.5554587827489907]], [1.2876877011903973, [17, -1.5979694438815883], [13, -1.3273205276213198], [12, -1.7784457762302424], [13, 1.863128384219615], [21, -1.7507264917480034], [25, 1.299001760686874], [23, 1.0339011863449574], [20, 0.36589964568427913], [39, -1.8616028756866063], [16, 0.6102358653306275], [4, 1.5107491942079263], [6, 1.0738545782153928], [32, -1.4600121320065584], [2, 0.022744272600262683], [6, 1.204063255565735], [23, 0.9513984149836721], [33, -0.1675396736017083], [11, -1.7260378796409337], [18, -0.9791208471645874], [15, -0.22884444976819474], [39, 0.16260709050385502]], [1.6598773780925593, [17, 0.6534348638517344], [9, -0.6425728447362484], [33, 1.5254616500329754], [18, 0.6842121756284105], [12, 1.6894902772599942], [7, -0.9328990722391297], [11, 1.9895534164612205], [33, -0.6867136596053838], [31, 0.15924354229116666], [13, 0.9078518707247647], [33, 1.6017690509991866], [30, -1.1238406592136752], [13, -0.3869431818152198], [16, -1.9252654280509622], [28, 0.9033027464047265], [37, -1.6878286579144133], [30, -0.010068789879685625], [32, 0.2760378395694696], [15, -0.831987314279361], [23, -0.34949795626662494], [39, -1.1430281171936438], [15, -0.12545500810874266], [22, 0.8604770666024266], [20, 1.8315261559435876], [3, -1.0296005466796605], [12, 1.5548080725450801], [3, 1.5445564287700861], [29, -1.7001943216558333], [11, -0.5737362616797252], [13, 1.0813120731401815], [8, -1.834062728871503], [27, -1.5387223757261435], [22, -1.817689526596765], [14, 0.15281514892574188], [38, 1.8407961305314755]], [-1.4600690836937806, [26, 0.933261840708226], [24, -1.8373077581308315], [11, -0.06038523257954065], [39, 1.3353529908500024], [3, -1.6734569441454568], [15, 0.5938560449324699], [9, -1.737604456372977], [24, -1.310530160088125], [8, 0.2611426746215586], [23, 1.1902867018930587], [12, 0.49109653379442], [29, 0.773333286060486], [32, 1.4650965374699494], [15, -1.2787049292472523], [18, -0.9642670787120502], [15, -0.28498272766569643], [11, 1.1439134285768588], [39, 1.3213493918156427], [5, 1.9155678724551062], [26, -0.9248698184091682], [23, 0.7152797372738675], [26, -1.3502202476501615], [2, 0.37055124050088484], [3, -1.480996134395474]], [1.269482788313185, [12, -1.8799711382261695], [24, 1.641120284272747], [38, -1.188752252702992], [4, -0.14216135807335784], [1, -0.09046141548291109], [7, 1.8417135390447141], [15, 1.2968710917720814], [21, -1.1327850948668918], [34, -0.5754117530256178], [7, 0.03197449998093482], [37, 1.8846949594362443]], [-1.7493517699485737, [7, 0.8788777142107596], [4, -0.31533615101109413], [38, -0.8325185545912199], [18, 1.4986655117545395], [15, -0.6406572598151272], [11, 1.3512553534912262], [1, 0.6689888987991766], [11, 0.7623673496591885], [30, -1.9861234245447434], [8, 0.9941719469619468], [37, 0.733282409541284], [18, 0.49018698942463823], [23, 1.2521420687484452], [7, 0.8499619792205588], [33, 1.4072596071976116], [36, -0.3483092680261439], [32, -0.008401184324853705], [10, -0.4020569332321964], [16, 1.5175945973306675], [0, 0.1368749243447911], [15, -0.612055699346036], [15, 1.4459269179501266]], [-0.7722997145697832, [5, 0.770590116791928], [20, 0.8196180840907368], [32, 0.05264289501833508], [19, 1.6117389501835615], [25, 0.2478279559274994], [28, -0.3589016240339262], [38, -0.6508226063763396], [22, 1.9755286595610704]], [1.955710490580561, [36, -0.26943632287611674], [14, 1.5103969973978577], [19, 0.1805670064246061], [1, -1.8284900628623117], [24, 1.7367284047974025], [23, 1.8051588332045618], [35, -0.42870014959746294], [32, -0.056397090568911956], [27, -0.6265289716706368], [37, 0.35672109288166043], [9, -0.1581505914666681], [23, 1.9930142656723056], [33, 1.7052191165556358], [29, 0.3469636405387164], [0, 0.6065465636730774], [30, 0.02289227673638683], [17, 0.8804248324656991], [33, -1.352583592271865], [16, -1.0037422645869873], [19, -0.06503249421253576], [15, 1.4872872949132154], [39, -1.3119176354452193], [11, -1.0465464185826359], [31, 0.662755037740193], [26, 0.753173921661817], [31, 0.8214027954806848], [28, -0.12057537276866315], [2, 0.8081227268945126]], [-0.7157370626009563, [33, -0.1554329577264526], [11, -0.9790454597910556], [2, 1.2486328763626773], [3, -1.4102707610934826], [22, 0.6905565664405047], [27, 0.06668902266253252], [27, -0.49327032493207357], [39, 0.12383169022098395], [20, -0.04575862011289766], [22, -0.9456100806316816], [39, -0.800714043246435], [27, -1.833449556587294], [5, -0.20363329229223037], [19, 1.9160107445928838], [21, -1.5177533529578637], [7, -0.7824538270226293], [24, -1.8238425596269963], [12, -0.4124763047049891], [22, -1.4731372114431514], [34, 0.6915083828368371]], [-1.376123830254342, [3, 0.7320213431474349], [26, 0.15823050179034936], [4, -1.2750010746260805], [38, -0.38078931150197404], [0, -1.0992963616099098], [5, -0.327765747603292], [35, 0.3222686832352113], [9, 0.21354347928632667], [3, 0.636775304922772], [17, -0.7100278819853969], [35, 0.2761049476365587], [31, -1.6648898445281475], [15, 0.5897158938250855], [22, 0.27113760015342514], [19, -0.8591406234098846], [27, 1.1536829748123725], [38, 0.44567832089021175], [8, 0.6963177095350996], [32, -0.9012221374522151], [28, -1.9533680063328593], [30, 1.214719504719608]], [-0.5143632299242129, [15, -1.010036882164591], [29, -1.7671346310747444], [7, -0.6606936514111017], [16, -0.5048955178999002], [19, -0.5099036631047058], [22, 1.1631637016387044], [26, 1.364101671593719], [9, -1.836759057238555], [9, 1.0172350941240906], [39, -0.2319377027075915], [31, 0.04779435599307025], [14, -0.1769367446538559], [1, -1.5759648477100212], [14, -0.5234756994259557], [32, -1.9950258896303095], [30, 1.4404375551438453], [17, -0.17447724106220042], [35, -1.489747039298917], [32, -1.5904451347837396], [5, -1.2684140455441724], [32, 0.9179436460492885], [34, -1.461189894036445], [13, -1.882797517599836], [15, 0.5336351719271928], [24, 1.8065231830511124], [28, 0.7856061094550681], [18, 1.9215701221848618], [20, 1.0161602673357], [35, -1.915278054068021]], [0.4627305839678586, [20, 1.0728289651683607], [9, 1.5553230625286534], [13, -0.9085502754513546], [14, -1.3506642594783673], [7, -1.7097340493314905], [5, 1.093013758398477], [14, 0.3418047399760731], [24, 0.9204296444392903], [16, 0.3505685381354344], [31, 0.8164164421225566], [29, -0.6749625003438382], [0, 0.7115005369770562], [4, -1.382489274993917], [25, -1.8911244575415078], [37, 0.6193298226030421], [22, -1.6628107622403911], [29, 1.3387940345508267], [18, -1.4146045134911045], [2, 0.7277054688891842], [37, 0.4689987291737534], [22, 1.973119913589656], [5, -0.06382302368716752], [4, -0.3221362572592641], [28, -1.6288434953219735], [16, 0.38913938065818643]], [0.5145556425913922, [7, -1.3911149474927331], [3, 0.40456621146113525], [4, -1.6177725493159354], [8, -1.6157725344942522], [16, 0.7854400166752171], [13, 1.3872284257460383], [9, -0.5483249137665673], [32, 1.4255196817710942], [11, 0.10950908611982557], [18, -1.3667658683444475], [8, 1.3127789921296333], [24, -1.0177529267521903], [31, 1.5540221758354922], [20, 0.022323612623803335], [0, -1.7107940878141932], [6, 1.99722502631698], [32, -0.4146965089557386], [4, 1.8316646963114045], [26, 1.4461519161242737], [13, 1.1970251984759215], [15, -0.7820670111691386]], [0.967620049527083, [22, 0.8250060956825447], [35, -0.6737570434378974], [8, -0.8417177730242402], [33, 0.13324016899533042], [20, -0.06251117173259324], [6, 1.6298597418839553], [24, 0.5955948816440069], [33, 0.7873814229114826], [18, 1.7146045907655911], [23, 0.46075920320017216], [33, 1.2307965164172536], [22, 0.19355788907838578], [2, 1.9061326079391225], [24, 0.17897301636035046], [16, 0.7634974669194343], [21, 0.5389995516345825], [29, -0.6698176111310246], [19, 0.6408132613848778], [6, 1.5721040095526777], [20, 1.2694928743732015], [30, -1.3460442003049615], [12, 1.2107187319378823], [0, -1.2067552741152552], [3, 1.586478342221048], [17, -0.27217514113542896], [6, 0.11534436320776065], [9, -1.6233562491256057], [5, -0.703856843383524], [33, -0.04548486477546554], [9, -0.009549717442537187], [39, -1.6664310911390228], [33, 1.3024299103308765]], [-0.5743418422944653, [31, 1.3015969060672203], [8, -0.9302973394920921], [36, -0.8080899215834565], [37, -1.8211675719487848], [19, -0.4583401407047911], [34, -1.9304379352873688], [28, -0.5419458812905678], [1, 0.1075288014246647], [35, 0.9094603964846417], [28, 1.74140015352254], [32, -1.8126538574127773], [6, 1.8441175788332393], [2, -0.8219951290340326], [31, 1.1447645776379938], [0, -1.0898394302078178], [15, 0.6908663485562156]], [-1.5010726365411617, [25, 0.9047366234638785], [34, -1.144955228332444], [3, 0.10844076193633967], [4, 1.1331634421347], [19, -0.5645832565786466], [25, -0.9608157801413744], [2, -1.1091803682351764], [12, -1.57711543414264], [16, 1.1075566645342794], [8, -1.5027523299240126], [2, -0.4389703879432294], [33, -0.1980915048059022], [27, -0.9079675929134359], [37, 1.5405990798302245], [15, -1.0212138476341432], [30, -1.3208862698902388], [33, -1.498062235917959], [20, 1.176056361122611]], [-1.7573704160963435, [12, 0.0988823194508246], [13, 0.08520876193018001], [31, -1.1870012548445312], [2, 0.2150230374747779], [31, 0.9539021539452537], [15, 0.26567253561188275], [2, -1.9068297230280793], [9, 0.8906506233334688], [26, -1.1133232122141914], [18, 1.7526758501811655], [1, -1.8705805606224661], [32, -1.733893931065304], [37, 1.4268989489726174], [28, 1.2849674588300863], [25, -0.8232749838188034], [35, -0.07322277612545891], [34, -1.8843775405203114], [4, 1.803809427205398], [10, -0.6044981501949773], [6, -0.40551029978456343], [35, -0.567198369529518]], [0.4676344208590333, [21, 0.9493110185149782], [29, -0.31152354924048264], [18, 0.1297379992240879], [27, 1.1386387079637705], [35, 0.16542810847838574], [39, -0.867989796561647], [16, 1.0980024625724458], [0, -0.536041777114344], [26, 1.0713655685382188], [27, -1.5646671506469043], [4, 0.9842450136236556], [5, 0.6754088123000006], [6, -1.9485730730082929], [19, -0.03387444746565116], [37, 0.1827312633884537], [12, -0.8828308112820671], [14, 0.08137068494948263], [33, 0.6886908849281705], [34, 1.3926481193026632], [8, 1.171372518348555], [5, -0.6988289831017558]], [0.8322005868457221, [39, -1.1723010118658217], [15, -0.8420900363519732], [12, 1.843143398358566], [6, -1.72259957439482], [34, 1.8236488445609194], [28, -1.2108976970298566], [7, -1.378111590712007], [36, 0.7397134294566796], [39, 1.2680001484147816], [5, 0.2828043095219721], [12, -1.607688526835537], [39, -0.7388931034666277], [2, 1.5303650485364897], [4, 0.3528291859061694], [4, -1.7483788708375485], [20, -1.9083778472844988], [20, 0.6062028406754765], [36, 1.0435469668054638], [2, 0.41949655098603555], [3, -1.457788360291476], [16, -0.10406162552717468], [10, -0.4927448739487361]], [-0.5855699433335522, [34, -1.2254371549068943], [0, 1.5318694573789609], [15, -0.1788020605328975], [5, 0.3046889635864165], [38, -1.0499059749406952], [9, 1.2720371579261984], [2, -0.8024553550592546], [39, 1.2720976675482278], [18, 0.5033238510968578], [5, -0.17051446604764964], [35, 0.4341778276215371], [26, -1.0402059529263425], [27, -1.3224253581511274], [27, 0.41952496932173666], [24, -1.5874814758974565], [35, -1.70726106342036], [1, -0.7425293388746774], [30, -0.08735288398408914], [33, 1.191342395224377], [14, 1.9757432759760345], [31, -0.32008409920623215], [11, 1.883568518867837], [34, 0.7297174485960576], [11, 1.4269259260532734], [18, -0.4102965842424533], [3, 1.8054078795998163], [27, -0.4094082540665407], [38, 1.7886479468763317], [15, 0.2697285342732645], [28, 0.41781458643312064], [35, 0.08745205856531957], [19, 0.9227982992058541], [3, 1.969143099798882]], [-1.2829259518540783, [5, -0.6073014924968025], [27, -0.20624146517035502], [5, 0.391381371840521], [5, 1.4273170225909886], [23, 1.6272932334505077], [16, 1.2364227542592703], [25, 1.9851421637243818], [14, 1.6216004989955328], [25, 0.08888452380758238], [12, -0.3707417988536319], [16, -1.8662419690229806], [35, -1.5841490228665234], [8, -0.1634092718316067], [0, -1.1084090851553645], [9, 0.764035771133841], [16, 1.747917583725378], [23, -1.0188073408993974], [32, 1.7270933946020302], [28, 0.28585734578210786], [13, -0.5556850897158689]], [-0.015506084710025014, [3, 1.7360883544504393], [35, -0.7258139652115787], [34, 0.7518296012554093], [27, 1.0887409319828993], [22, -0.16374143739698432], [0, -0.08746644050829833], [12, 1.467223836663762], [20, 1.5982265361661212], [1, -0.2900480477989089], [16, 1.2392973079765444], [9, 0.9665739970108946], [19, 0.9451091920137205], [30, 1.4423845021651012], [34, -1.7342462055736396], [37, -1.9533241399735344], [28, 0.27352540916573487]], [1.8919590329754898, [34, -0.4151193858998199], [1, -1.3152669755504922], [28, 1.1469745678872463], [6, 1.9342524240669707], [8, 1.2290129741041529], [34, 0.7969998824942781], [39, 1.5389802711912322], [23, -0.19194436021954875], [17, 0.821824036811837], [25, -0.9668782269721241], [1, -1.9420959198685384], [27, 1.4636077315778087], [1, -1.31843663954949], [4, -0.8181576825119001], [37, 1.8962461660727605], [2, -1.9807417329782204], [27, -0.3551736773139105]], [0.6282194481188559], [0.028029110531551993], [-1.5918022405670742]]

#Snaked = NeuronNerwork(SetDoData)
#Gamed = Game()
#while True:
#    input()
#    for cycle in range(NeuronCycle):
#        Snaked.ActiveNeuron = NeuronGO(Snaked.ActiveNeuron)
#    reward, state = Gamed.Game_(np.argmax([
#        Snaked.NETWORK[-i-1].OutputSignal 
#        for i in range(OutputNeuronSise)
#        ])-1)
        
#    if state:
#        Snaked.ActiveNeuron = Deduplication(Snaked.ActiveNeuron + Snaked.NETWORK[:inputNeuronSise])
#        for In in range(inputNeuronSise):
#            Snaked.NETWORK[In].OutputSignal = state[In]
#    else: 
#        Gamed.reset()